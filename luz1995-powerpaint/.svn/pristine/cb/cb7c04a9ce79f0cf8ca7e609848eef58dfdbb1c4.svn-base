/*
* TCSS 305 Autumn 2017
* Assignment5 PowerPaint
*/

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import javax.swing.JPanel;


/**
 * A painting panel.
 * 
 * @author Zhou Lu
 * @version 11/11/2017
 */
public class PaintPanel extends JPanel {
    

    /**
     * The panel width.
     */
    public static final int WIDTH = 400;

    /**
     * The panel height.
     */
    public static final int HEIGHT = 400;

    /**
     * The background color of the panel.
     */
    public static final Color BACKGROUND_COLOR = Color.WHITE;

    /**
     * The color to paint with.
     */
    public static final Color FOREGROUND_COLOR = Color.BLACK;

    /**
     * The line width.
     */
    public static final int LINE_WIDTH = 8;

    /**
     * a generated ID.
     */
    private static final long serialVersionUID = 7433986345408882883L;
    
    /** inner class field for starting point. */
    private Point myStartPoint;
    
    /** inner class field for ending point. */
    private Point myEndPoint;
    
//    /** a field for drawing line.*/
//    private Shape drawLine;
    
    // Instance Fields

    /**
     * The path being created.
     */
    private final Path2D myPath;
    
    // OR you could use Path2D.Double instead of GeneralPath

    // Constructor

    /**
     * Constructs a new general path panel.
     */
    public PaintPanel() {
        super();
        myPath = new GeneralPath();
        myPath.setWindingRule(GeneralPath.WIND_EVEN_ODD);
        
        //myPath = new Path2D.Double();
        
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(BACKGROUND_COLOR);
        addMouseListener(new MyMouseListener());
        addMouseMotionListener(new MyMouseMotionListener());
    }

    /**
     * Paints the current path.
     * 
     * @param theGraphics The graphics context to use for painting.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setPaint(FOREGROUND_COLOR);
        g2d.setStroke(new BasicStroke(LINE_WIDTH));
        g2d.draw(myPath);
//        drawLine = new Line2D.Double(myStartPoint.getX(), 
//                                     myStartPoint.getY(), 
//                                     myEndPoint.getX(), 
//                                     myEndPoint.getY());
//        g2d.draw(drawLine);
    }

    // Inner Class

    /**
     * Listens for mouse clicks, to draw on our panel.
     */
    private class MyMouseListener extends MouseAdapter {
        
        @Override
        public void mousePressed(final MouseEvent theEvent) {
            myStartPoint = theEvent.getPoint();
            myPath.moveTo(myStartPoint.getX(), myStartPoint.getY());
            
        }
        
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            myEndPoint = theEvent.getPoint();
            repaint();
        }
    }
    
    /**
     * Listens for mouse clicks, to draw on our panel.
     */
    private class MyMouseMotionListener extends MouseAdapter {
           
        @Override
        public void mouseDragged(final MouseEvent theEvent) {
            myEndPoint = theEvent.getPoint();
            myPath.lineTo(myEndPoint.getX(), myEndPoint.getY());
            repaint();
        }
    }

}
